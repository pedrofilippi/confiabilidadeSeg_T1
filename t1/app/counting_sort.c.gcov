        -:    0:Source:src/counting_sort.c
        -:    1:/*Implementation of Counting sort in C. This implementation works only 
        -:    2:    with integers.*/
        -:    3:#include <stdio.h>
        -:    4:#include <stdlib.h>
        -:    5:void counting_sort(int [], int);
        -:    6:int find_max(int [], int);
        -:    7:
function counting_sort called 5 returned 100% blocks executed 100%
        5:    8:void counting_sort(int a[], int length){
        -:    9:    /*for a[] = {0, 3, 2, 3, 3, 0, 5, 2, 3} range will be 0, ... , 5. 
        -:   10:        So we will need 6 spots in our new sub-array which is max + 1*/
        5:   11:    int i, max = find_max(a, length);
call    0 returned 100%
        5:   12:    int c[max+1];
        -:   13:    
       89:   14:    for(i = 0; i < max + 1; c[i++] = 0); // first c[i] = 0 will be done, then i++;
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:   15:    
       55:   16:    for(i = 0; i < length; i++) c[a[i]]++;
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   17:    
       84:   18:    for(i = 1; i < max + 1; i++) c[i] = c[i - 1] + c[i];
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:   19:    
        -:   20:    
        5:   21:    int b[length]; //this is gonna be our new sorted array
        5:   22:    int j = length - 1;
       55:   23:    for(i = 0; i < length; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
       50:   24:        b[--c[a[j]]] = a[j];
       50:   25:        j--;
        -:   26:    }    
        -:   27:    
        -:   28:    /*Right now B represents sorted array of A. But i want to change A (original) 
        -:   29:        so i will overwrite B over A array.*/
       55:   30:    for(i = 0; i < length; i++)    a[i] = b[i];
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   31:
        5:   32:}
function find_max called 5 returned 100% blocks executed 100%
        5:   33:int find_max(int a[], int length){
        5:   34:    int i, max = a[0];
       50:   35:    for(i = 1; i < length; i++) {
branch  0 taken 90%
branch  1 taken 10% (fallthrough)
       45:   36:        if(max < a[i]) max = a[i];
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
        -:   37:    }
        5:   38:    return max;
        -:   39:}
