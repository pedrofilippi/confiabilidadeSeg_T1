        -:    0:Source:test/test_runners/Test_Runner.c
        -:    1:#include "unity.h"
        -:    2:#include "unity_fixture.h"
        -:    3:
function TEST_Sort_GROUP_RUNNER called 1 returned 100% blocks executed 100%
        1:    4:TEST_GROUP_RUNNER(Sort)
        -:    5:{
        1:    6:  RUN_TEST_CASE(Sort, AllCorrectCounting);
call    0 returned 100%
        1:    7:  RUN_TEST_CASE(Sort, BellowLimitCounting);
call    0 returned 100%
        1:    8:  RUN_TEST_CASE(Sort,  minLimitCounting);
call    0 returned 100%
        1:    9:  RUN_TEST_CASE(Sort, maxLimitCounting);
call    0 returned 100%
        1:   10:  RUN_TEST_CASE(Sort, aboveLimitCounting);
call    0 returned 100%
        1:   11:  RUN_TEST_CASE(Sort, WrongTypeCounting);
call    0 returned 100%
        1:   12:  RUN_TEST_CASE(Sort, WrongLenghtCounting);
call    0 returned 100%
        -:   13:
        1:   14:  RUN_TEST_CASE(Sort, AllCorrectRadix);
call    0 returned 100%
        1:   15:  RUN_TEST_CASE(Sort, BellowLimitRadix);
call    0 returned 100%
        1:   16:  RUN_TEST_CASE(Sort,  minLimitRadix);
call    0 returned 100%
        1:   17:  RUN_TEST_CASE(Sort, maxLimitRadix);
call    0 returned 100%
        1:   18:  RUN_TEST_CASE(Sort, aboveLimitRadix);
call    0 returned 100%
        1:   19:  RUN_TEST_CASE(Sort, WrongTypeRadix);
call    0 returned 100%
        1:   20:  RUN_TEST_CASE(Sort, WrongLenghtRadix);
call    0 returned 100%
        -:   21:
        1:   22:  RUN_TEST_CASE(Sort, AllCorrectBubble);
call    0 returned 100%
        1:   23:  RUN_TEST_CASE(Sort, BellowLimitBubble);
call    0 returned 100%
        1:   24:  RUN_TEST_CASE(Sort,  minLimitBubble);
call    0 returned 100%
        1:   25:  RUN_TEST_CASE(Sort, maxLimitBubble);
call    0 returned 100%
        1:   26:  RUN_TEST_CASE(Sort, aboveLimitBubble);
call    0 returned 100%
        1:   27:  RUN_TEST_CASE(Sort, WrongTypeBubble);
call    0 returned 100%
        1:   28:  RUN_TEST_CASE(Sort, WrongLenghtBubble);
call    0 returned 100%
        -:   29:
        1:   30:  RUN_TEST_CASE(Sort, AllCorrectInsertion);
call    0 returned 100%
        1:   31:  RUN_TEST_CASE(Sort, BellowLimitInsertion);
call    0 returned 100%
        1:   32:  RUN_TEST_CASE(Sort,  minLimitInsertion);
call    0 returned 100%
        1:   33:  RUN_TEST_CASE(Sort, maxLimitInsertion);
call    0 returned 100%
        1:   34:  RUN_TEST_CASE(Sort, aboveLimitInsertion);
call    0 returned 100%
        1:   35:  RUN_TEST_CASE(Sort, WrongTypeInsertion);
call    0 returned 100%
        1:   36:  RUN_TEST_CASE(Sort, WrongLenghtInsertion);
call    0 returned 100%
        -:   37:
        1:   38:    RUN_TEST_CASE(Sort, AllCorrectSelection);
call    0 returned 100%
        1:   39:  RUN_TEST_CASE(Sort, BellowLimitSelection);
call    0 returned 100%
        1:   40:  RUN_TEST_CASE(Sort,  minLimitSelection);
call    0 returned 100%
        1:   41:  RUN_TEST_CASE(Sort, maxLimitSelection);
call    0 returned 100%
        1:   42:  RUN_TEST_CASE(Sort, aboveLimitSelection);
call    0 returned 100%
        1:   43:  RUN_TEST_CASE(Sort, WrongTypeSelection);
call    0 returned 100%
        1:   44:  RUN_TEST_CASE(Sort, WrongLenghtSelection);
call    0 returned 100%
        -:   45:
        1:   46:  RUN_TEST_CASE(Sort, AllCorrectHeap);
call    0 returned 100%
        1:   47:  RUN_TEST_CASE(Sort, BellowLimitHeap);
call    0 returned 100%
        1:   48:  RUN_TEST_CASE(Sort,  minLimitHeap);
call    0 returned 100%
        1:   49:  RUN_TEST_CASE(Sort, maxLimitHeap);
call    0 returned 100%
        1:   50:  RUN_TEST_CASE(Sort, aboveLimitHeap);
call    0 returned 100%
        1:   51:  RUN_TEST_CASE(Sort, WrongTypeHeap);
call    0 returned 100%
        1:   52:  RUN_TEST_CASE(Sort, WrongLenghtHeap);
call    0 returned 100%
        -:   53:
        1:   54:  RUN_TEST_CASE(Sort, AllCorrectMerge);
call    0 returned 100%
        1:   55:  RUN_TEST_CASE(Sort, BellowLimitMerge);
call    0 returned 100%
        1:   56:  RUN_TEST_CASE(Sort,  minLimitMerge);
call    0 returned 100%
        1:   57:  RUN_TEST_CASE(Sort, maxLimitMerge);
call    0 returned 100%
        1:   58:  RUN_TEST_CASE(Sort, aboveLimitMerge);
call    0 returned 100%
        1:   59:  RUN_TEST_CASE(Sort, WrongTypeMerge);
call    0 returned 100%
        1:   60:  RUN_TEST_CASE(Sort, WrongLenghtMerge);
call    0 returned 100%
        -:   61:
        1:   62:  RUN_TEST_CASE(Sort, AllCorrectQuick);
call    0 returned 100%
        1:   63:  RUN_TEST_CASE(Sort, BellowLimitQuick);
call    0 returned 100%
        1:   64:  RUN_TEST_CASE(Sort,  minLimitQuick);
call    0 returned 100%
        1:   65:  RUN_TEST_CASE(Sort, maxLimitQuick);
call    0 returned 100%
        1:   66:  RUN_TEST_CASE(Sort, aboveLimitQuick);
call    0 returned 100%
        1:   67:  RUN_TEST_CASE(Sort, WrongTypeQuick);
call    0 returned 100%
        1:   68:  RUN_TEST_CASE(Sort, WrongLenghtQuick);
call    0 returned 100%
        -:   69:
        1:   70:  RUN_TEST_CASE(Sort, WrongAlgorithm);
call    0 returned 100%
        1:   71:  RUN_TEST_CASE(Sort, Sorted);
call    0 returned 100%
        -:   72:
        -:   73:
        1:   74:}
