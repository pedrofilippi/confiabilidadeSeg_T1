        -:    0:Source:src/merge_sort.c
        -:    1://Implementation of Merge Sort in C
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:typedef int TYPE;
        -:    5:void merge(TYPE [], int, int, int);
        -:    6:void merge_sort(TYPE [], int, int);
        -:    7:
function merge called 45 returned 100% blocks executed 100%
       45:    8:void merge(TYPE A[], int p, int q, int r) {
        -:    9:    int i, j, k;
       45:   10:    int nL = q - p + 1; 
       45:   11:    int nR = r - q;
        -:   12:
       45:   13:    TYPE *L = malloc(sizeof(TYPE)*nL);
       45:   14:    TYPE *R = malloc(sizeof(TYPE)*nR);
        -:   15:    
      152:   16:    for (i = 0; i < nL; i++)    
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
      107:   17:        L[i] = A[p + i];
        -:   18:    
      133:   19:    for (j = 0; j < nR; j++)    
branch  0 taken 66%
branch  1 taken 34% (fallthrough)
       88:   20:        R[j] = A[q + 1 + j];
        -:   21:    
       45:   22:    i = j = 0;
       45:   23:    k = p;
        -:   24:    
      167:   25:    while (i < nL && j < nR) 
branch  0 taken 84% (fallthrough)
branch  1 taken 16%
branch  2 taken 87%
branch  3 taken 13% (fallthrough)
      122:   26:        if (L[i] <= R[j])  A[k++] = L[i++];
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
       41:   27:        else  A[k++] = R[j++];
        -:   28:    
       71:   29:    while (i < nL)    A[k++] = L[i++];
branch  0 taken 37%
branch  1 taken 63% (fallthrough)
       92:   30:    while (j < nR)    A[k++] = R[j++];
branch  0 taken 51%
branch  1 taken 49% (fallthrough)
        -:   31:        
       45:   32:    free(L);
       45:   33:    free(R);
       45:   34:}
function merge_sort called 95 returned 100% blocks executed 100%
       95:   35:void merge_sort(TYPE A[], int p, int r) {
       95:   36:    if(p < r) {
branch  0 taken 47% (fallthrough)
branch  1 taken 53%
       45:   37:        int q = (p + r) / 2;
       45:   38:        merge_sort(A, p, q);
call    0 returned 100%
       45:   39:        merge_sort(A, q + 1, r);
call    0 returned 100%
       45:   40:        merge(A, p, q, r);
call    0 returned 100%
        -:   41:    }
       95:   42:}
