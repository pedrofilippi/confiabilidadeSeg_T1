        -:    0:Source:test/Test.c
        -:    1://#include "Sort.h"
        -:    2:#include "sort.h"
        -:    3:#include "unity.h"
        -:    4:#include "unity_fixture.h"
        -:    5:
        -:    6:    char complexity1[] = "On";
        -:    7:    char complexity2[] = "On2";
        -:    8:    char complexity3[] = "Onlogn";
        -:    9:    char complexityFail[] = "Abacate";
        -:   10:
        -:   11:TEST_GROUP(Sort);
        -:   12:
function TEST_Sort_SETUP called 58 returned 100% blocks executed 100%
       58:   13:TEST_SETUP(Sort)
        -:   14:{
       58:   15:}
        -:   16:
function TEST_Sort_TEAR_DOWN called 58 returned 100% blocks executed 100%
       58:   17:TEST_TEAR_DOWN(Sort)
        -:   18:{
       58:   19:}
        -:   20:  
        -:   21:    int expected_bellow[1] = {1};
        -:   22:    int expected_minLimit[2] = {7,15};
        -:   23:    int expected_ok[3] = {0, 1, 5};
        -:   24:    int expected_maxLimit[20] = {0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17,17, 18, 19, 20};
        -:   25:    int expected_above[21] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,21};
        -:   26:    
        -:   27://counting    
        -:   28:
        2:   29:TEST(Sort, AllCorrectCounting) {
        1:   30:    int vet_ok[3] = {1,5,0};
        1:   31:    int status = sort(vet_ok, 3, complexity1, COUNTING);
        1:   32:    TEST_ASSERT_EQUAL(0, status);
        1:   33:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_ok, vet_ok, 3);
        1:   34:}
------------------
TEST_Sort_AllCorrectCounting_:
function TEST_Sort_AllCorrectCounting_ called 1 returned 100% blocks executed 100%
        1:   29:TEST(Sort, AllCorrectCounting) {
        1:   30:    int vet_ok[3] = {1,5,0};
        1:   31:    int status = sort(vet_ok, 3, complexity1, COUNTING);
call    0 returned 100%
        1:   32:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:   33:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_ok, vet_ok, 3);
call    0 returned 100%
        1:   34:}
------------------
TEST_Sort_AllCorrectCounting_run:
function TEST_Sort_AllCorrectCounting_run called 1 returned 100% blocks executed 100%
        1:   29:TEST(Sort, AllCorrectCounting) {
call    0 returned 100%
------------------
        -:   35:
        2:   36:TEST(Sort, BellowLimitCounting) {
        1:   37:    int vet_bellow[1] = {1};
        1:   38:    int status = sort(vet_bellow, 1, complexity1, COUNTING);
        1:   39:    TEST_ASSERT_EQUAL(1, status);
        1:   40:}
------------------
TEST_Sort_BellowLimitCounting_:
function TEST_Sort_BellowLimitCounting_ called 1 returned 100% blocks executed 100%
        1:   36:TEST(Sort, BellowLimitCounting) {
        1:   37:    int vet_bellow[1] = {1};
        1:   38:    int status = sort(vet_bellow, 1, complexity1, COUNTING);
call    0 returned 100%
        1:   39:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:   40:}
------------------
TEST_Sort_BellowLimitCounting_run:
function TEST_Sort_BellowLimitCounting_run called 1 returned 100% blocks executed 100%
        1:   36:TEST(Sort, BellowLimitCounting) {
call    0 returned 100%
------------------
        -:   41:
        2:   42:TEST(Sort, minLimitCounting) {
        1:   43:    int vet_minLimit[2] = {15,7};
        1:   44:    int status = sort(vet_minLimit, 2, complexity1, COUNTING);
        1:   45:    TEST_ASSERT_EQUAL(0, status);
        1:   46:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_minLimit, vet_minLimit, 2);
        1:   47:}
------------------
TEST_Sort_minLimitCounting_:
function TEST_Sort_minLimitCounting_ called 1 returned 100% blocks executed 100%
        1:   42:TEST(Sort, minLimitCounting) {
        1:   43:    int vet_minLimit[2] = {15,7};
        1:   44:    int status = sort(vet_minLimit, 2, complexity1, COUNTING);
call    0 returned 100%
        1:   45:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:   46:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_minLimit, vet_minLimit, 2);
call    0 returned 100%
        1:   47:}
------------------
TEST_Sort_minLimitCounting_run:
function TEST_Sort_minLimitCounting_run called 1 returned 100% blocks executed 100%
        1:   42:TEST(Sort, minLimitCounting) {
call    0 returned 100%
------------------
        -:   48:
        2:   49:TEST(Sort, maxLimitCounting) {
        1:   50:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:   51:    int status = sort(vet_maxLimit, 20, complexity1, COUNTING);
        1:   52:    TEST_ASSERT_EQUAL(0, status);
        1:   53:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_maxLimit, vet_maxLimit, 20);
        1:   54:}
------------------
TEST_Sort_maxLimitCounting_:
function TEST_Sort_maxLimitCounting_ called 1 returned 100% blocks executed 100%
        1:   49:TEST(Sort, maxLimitCounting) {
        1:   50:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:   51:    int status = sort(vet_maxLimit, 20, complexity1, COUNTING);
call    0 returned 100%
        1:   52:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:   53:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_maxLimit, vet_maxLimit, 20);
call    0 returned 100%
        1:   54:}
------------------
TEST_Sort_maxLimitCounting_run:
function TEST_Sort_maxLimitCounting_run called 1 returned 100% blocks executed 100%
        1:   49:TEST(Sort, maxLimitCounting) {
call    0 returned 100%
------------------
        -:   55:
        2:   56:TEST(Sort, aboveLimitCounting) {
        1:   57:    int vet_above[21] = {14, 3, 20, 7, 1, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16,21, 13, 9, 18, 15};
        1:   58:    int status = sort(vet_above, 21, complexity1, COUNTING);
        1:   59:    TEST_ASSERT_EQUAL(1, status);
        1:   60:}
------------------
TEST_Sort_aboveLimitCounting_:
function TEST_Sort_aboveLimitCounting_ called 1 returned 100% blocks executed 100%
        1:   56:TEST(Sort, aboveLimitCounting) {
        1:   57:    int vet_above[21] = {14, 3, 20, 7, 1, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16,21, 13, 9, 18, 15};
        1:   58:    int status = sort(vet_above, 21, complexity1, COUNTING);
call    0 returned 100%
        1:   59:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:   60:}
------------------
TEST_Sort_aboveLimitCounting_run:
function TEST_Sort_aboveLimitCounting_run called 1 returned 100% blocks executed 100%
        1:   56:TEST(Sort, aboveLimitCounting) {
call    0 returned 100%
------------------
        -:   61:
        2:   62:TEST(Sort, WrongTypeCounting) {
        1:   63:    int vet_ok[3] = {1,5,0};
        1:   64:    int status = sort(vet_ok, 3, complexity2, COUNTING);
        1:   65:    TEST_ASSERT_EQUAL(1, status);
        1:   66:}
------------------
TEST_Sort_WrongTypeCounting_:
function TEST_Sort_WrongTypeCounting_ called 1 returned 100% blocks executed 100%
        1:   62:TEST(Sort, WrongTypeCounting) {
        1:   63:    int vet_ok[3] = {1,5,0};
        1:   64:    int status = sort(vet_ok, 3, complexity2, COUNTING);
call    0 returned 100%
        1:   65:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:   66:}
------------------
TEST_Sort_WrongTypeCounting_run:
function TEST_Sort_WrongTypeCounting_run called 1 returned 100% blocks executed 100%
        1:   62:TEST(Sort, WrongTypeCounting) {
call    0 returned 100%
------------------
        -:   67:
        -:   68:
        2:   69:TEST(Sort, WrongLenghtCounting) {
        1:   70:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:   71:    int vet_less[20] = {0, 3, 7, 14, 20, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:   72:    int status = sort(vet_maxLimit, 5, complexity1, COUNTING);
        -:   73:
        1:   74:    TEST_ASSERT_EQUAL(0, status);
        1:   75:    TEST_ASSERT_EQUAL_INT_ARRAY(vet_maxLimit, vet_less, 20);
        1:   76:}
------------------
TEST_Sort_WrongLenghtCounting_:
function TEST_Sort_WrongLenghtCounting_ called 1 returned 100% blocks executed 100%
        1:   69:TEST(Sort, WrongLenghtCounting) {
        1:   70:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:   71:    int vet_less[20] = {0, 3, 7, 14, 20, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:   72:    int status = sort(vet_maxLimit, 5, complexity1, COUNTING);
call    0 returned 100%
        -:   73:
        1:   74:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:   75:    TEST_ASSERT_EQUAL_INT_ARRAY(vet_maxLimit, vet_less, 20);
call    0 returned 100%
        1:   76:}
------------------
TEST_Sort_WrongLenghtCounting_run:
function TEST_Sort_WrongLenghtCounting_run called 1 returned 100% blocks executed 100%
        1:   69:TEST(Sort, WrongLenghtCounting) {
call    0 returned 100%
------------------
        -:   77:
        -:   78:
        -:   79:// radix
        -:   80:
        2:   81:TEST(Sort, AllCorrectRadix) {
        1:   82:    int vet_ok[3] = {1,5,0};
        1:   83:    int status = sort(vet_ok, 3, complexity1, RADIX);
        1:   84:    TEST_ASSERT_EQUAL(0, status);
        1:   85:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_ok, vet_ok, 3);
        1:   86:}
------------------
TEST_Sort_AllCorrectRadix_:
function TEST_Sort_AllCorrectRadix_ called 1 returned 100% blocks executed 100%
        1:   81:TEST(Sort, AllCorrectRadix) {
        1:   82:    int vet_ok[3] = {1,5,0};
        1:   83:    int status = sort(vet_ok, 3, complexity1, RADIX);
call    0 returned 100%
        1:   84:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:   85:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_ok, vet_ok, 3);
call    0 returned 100%
        1:   86:}
------------------
TEST_Sort_AllCorrectRadix_run:
function TEST_Sort_AllCorrectRadix_run called 1 returned 100% blocks executed 100%
        1:   81:TEST(Sort, AllCorrectRadix) {
call    0 returned 100%
------------------
        -:   87:
        2:   88:TEST(Sort, BellowLimitRadix) {
        1:   89:    int vet_bellow[1] = {1};
        1:   90:    int status = sort(vet_bellow, 1, complexity1, RADIX);
        1:   91:    TEST_ASSERT_EQUAL(1, status);
        1:   92:}
------------------
TEST_Sort_BellowLimitRadix_:
function TEST_Sort_BellowLimitRadix_ called 1 returned 100% blocks executed 100%
        1:   88:TEST(Sort, BellowLimitRadix) {
        1:   89:    int vet_bellow[1] = {1};
        1:   90:    int status = sort(vet_bellow, 1, complexity1, RADIX);
call    0 returned 100%
        1:   91:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:   92:}
------------------
TEST_Sort_BellowLimitRadix_run:
function TEST_Sort_BellowLimitRadix_run called 1 returned 100% blocks executed 100%
        1:   88:TEST(Sort, BellowLimitRadix) {
call    0 returned 100%
------------------
        -:   93:
        2:   94:TEST(Sort, minLimitRadix) {
        1:   95:    int vet_minLimit[2] = {15,7};
        1:   96:    int status = sort(vet_minLimit, 2, complexity1, RADIX);
        1:   97:    TEST_ASSERT_EQUAL(0, status);
        1:   98:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_minLimit, vet_minLimit, 2);
        1:   99:}
------------------
TEST_Sort_minLimitRadix_:
function TEST_Sort_minLimitRadix_ called 1 returned 100% blocks executed 100%
        1:   94:TEST(Sort, minLimitRadix) {
        1:   95:    int vet_minLimit[2] = {15,7};
        1:   96:    int status = sort(vet_minLimit, 2, complexity1, RADIX);
call    0 returned 100%
        1:   97:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:   98:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_minLimit, vet_minLimit, 2);
call    0 returned 100%
        1:   99:}
------------------
TEST_Sort_minLimitRadix_run:
function TEST_Sort_minLimitRadix_run called 1 returned 100% blocks executed 100%
        1:   94:TEST(Sort, minLimitRadix) {
call    0 returned 100%
------------------
        -:  100:
        2:  101:TEST(Sort, maxLimitRadix) {
        1:  102:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  103:    int status = sort(vet_maxLimit, 20, complexity1, RADIX);
        1:  104:    TEST_ASSERT_EQUAL(0, status);
        1:  105:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_maxLimit, vet_maxLimit, 20);
        1:  106:}
------------------
TEST_Sort_maxLimitRadix_:
function TEST_Sort_maxLimitRadix_ called 1 returned 100% blocks executed 100%
        1:  101:TEST(Sort, maxLimitRadix) {
        1:  102:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  103:    int status = sort(vet_maxLimit, 20, complexity1, RADIX);
call    0 returned 100%
        1:  104:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  105:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_maxLimit, vet_maxLimit, 20);
call    0 returned 100%
        1:  106:}
------------------
TEST_Sort_maxLimitRadix_run:
function TEST_Sort_maxLimitRadix_run called 1 returned 100% blocks executed 100%
        1:  101:TEST(Sort, maxLimitRadix) {
call    0 returned 100%
------------------
        -:  107:
        2:  108:TEST(Sort, aboveLimitRadix) {
        1:  109:    int vet_above[21] = {14, 3, 20, 7, 1, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16,21, 13, 9, 18, 15};
        1:  110:    int status = sort(vet_above, 21, complexity1, RADIX);
        1:  111:    TEST_ASSERT_EQUAL(1, status);
        1:  112:}
------------------
TEST_Sort_aboveLimitRadix_:
function TEST_Sort_aboveLimitRadix_ called 1 returned 100% blocks executed 100%
        1:  108:TEST(Sort, aboveLimitRadix) {
        1:  109:    int vet_above[21] = {14, 3, 20, 7, 1, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16,21, 13, 9, 18, 15};
        1:  110:    int status = sort(vet_above, 21, complexity1, RADIX);
call    0 returned 100%
        1:  111:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:  112:}
------------------
TEST_Sort_aboveLimitRadix_run:
function TEST_Sort_aboveLimitRadix_run called 1 returned 100% blocks executed 100%
        1:  108:TEST(Sort, aboveLimitRadix) {
call    0 returned 100%
------------------
        -:  113:
        2:  114:TEST(Sort, WrongTypeRadix) {
        1:  115:    int vet_ok[3] = {1,5,0};
        1:  116:    int status = sort(vet_ok, 3, complexity2, RADIX);
        1:  117:    TEST_ASSERT_EQUAL(1, status);
        1:  118:}
------------------
TEST_Sort_WrongTypeRadix_:
function TEST_Sort_WrongTypeRadix_ called 1 returned 100% blocks executed 100%
        1:  114:TEST(Sort, WrongTypeRadix) {
        1:  115:    int vet_ok[3] = {1,5,0};
        1:  116:    int status = sort(vet_ok, 3, complexity2, RADIX);
call    0 returned 100%
        1:  117:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:  118:}
------------------
TEST_Sort_WrongTypeRadix_run:
function TEST_Sort_WrongTypeRadix_run called 1 returned 100% blocks executed 100%
        1:  114:TEST(Sort, WrongTypeRadix) {
call    0 returned 100%
------------------
        -:  119:
        -:  120:
        2:  121:TEST(Sort, WrongLenghtRadix) {
        1:  122:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  123:    int vet_less[20] = {0, 3, 7, 14, 20, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  124:    int status = sort(vet_maxLimit, 5, complexity1, RADIX);
        1:  125:    TEST_ASSERT_EQUAL(0, status);
        1:  126:    TEST_ASSERT_EQUAL_INT_ARRAY(vet_maxLimit, vet_less, 20);
        1:  127:}
------------------
TEST_Sort_WrongLenghtRadix_:
function TEST_Sort_WrongLenghtRadix_ called 1 returned 100% blocks executed 100%
        1:  121:TEST(Sort, WrongLenghtRadix) {
        1:  122:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  123:    int vet_less[20] = {0, 3, 7, 14, 20, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  124:    int status = sort(vet_maxLimit, 5, complexity1, RADIX);
call    0 returned 100%
        1:  125:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  126:    TEST_ASSERT_EQUAL_INT_ARRAY(vet_maxLimit, vet_less, 20);
call    0 returned 100%
        1:  127:}
------------------
TEST_Sort_WrongLenghtRadix_run:
function TEST_Sort_WrongLenghtRadix_run called 1 returned 100% blocks executed 100%
        1:  121:TEST(Sort, WrongLenghtRadix) {
call    0 returned 100%
------------------
        -:  128:
        -:  129:
        -:  130://bubble
        -:  131:
        2:  132:TEST(Sort, AllCorrectBubble) {
        1:  133:    int vet_ok[3] = {1,5,0};
        1:  134:    int status = sort(vet_ok, 3, complexity2, BUBBLE);
        1:  135:    TEST_ASSERT_EQUAL(0, status);
        1:  136:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_ok, vet_ok, 3);
        1:  137:}
------------------
TEST_Sort_AllCorrectBubble_:
function TEST_Sort_AllCorrectBubble_ called 1 returned 100% blocks executed 100%
        1:  132:TEST(Sort, AllCorrectBubble) {
        1:  133:    int vet_ok[3] = {1,5,0};
        1:  134:    int status = sort(vet_ok, 3, complexity2, BUBBLE);
call    0 returned 100%
        1:  135:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  136:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_ok, vet_ok, 3);
call    0 returned 100%
        1:  137:}
------------------
TEST_Sort_AllCorrectBubble_run:
function TEST_Sort_AllCorrectBubble_run called 1 returned 100% blocks executed 100%
        1:  132:TEST(Sort, AllCorrectBubble) {
call    0 returned 100%
------------------
        -:  138:
        2:  139:TEST(Sort, BellowLimitBubble) {
        1:  140:    int vet_bellow[1] = {1};
        1:  141:    int status = sort(vet_bellow, 1, complexity1, BUBBLE);
        1:  142:    TEST_ASSERT_EQUAL(1, status);
        1:  143:}
------------------
TEST_Sort_BellowLimitBubble_:
function TEST_Sort_BellowLimitBubble_ called 1 returned 100% blocks executed 100%
        1:  139:TEST(Sort, BellowLimitBubble) {
        1:  140:    int vet_bellow[1] = {1};
        1:  141:    int status = sort(vet_bellow, 1, complexity1, BUBBLE);
call    0 returned 100%
        1:  142:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:  143:}
------------------
TEST_Sort_BellowLimitBubble_run:
function TEST_Sort_BellowLimitBubble_run called 1 returned 100% blocks executed 100%
        1:  139:TEST(Sort, BellowLimitBubble) {
call    0 returned 100%
------------------
        -:  144:
        2:  145:TEST(Sort, minLimitBubble) {
        1:  146:    int vet_minLimit[2] = {15,7};
        1:  147:    int status = sort(vet_minLimit, 2, complexity2, BUBBLE);
        1:  148:    TEST_ASSERT_EQUAL(0, status);
        1:  149:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_minLimit, vet_minLimit, 2);
        1:  150:}
------------------
TEST_Sort_minLimitBubble_:
function TEST_Sort_minLimitBubble_ called 1 returned 100% blocks executed 100%
        1:  145:TEST(Sort, minLimitBubble) {
        1:  146:    int vet_minLimit[2] = {15,7};
        1:  147:    int status = sort(vet_minLimit, 2, complexity2, BUBBLE);
call    0 returned 100%
        1:  148:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  149:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_minLimit, vet_minLimit, 2);
call    0 returned 100%
        1:  150:}
------------------
TEST_Sort_minLimitBubble_run:
function TEST_Sort_minLimitBubble_run called 1 returned 100% blocks executed 100%
        1:  145:TEST(Sort, minLimitBubble) {
call    0 returned 100%
------------------
        -:  151:
        2:  152:TEST(Sort, maxLimitBubble) {
        1:  153:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  154:    int status = sort(vet_maxLimit, 20, complexity2, BUBBLE);
        1:  155:    TEST_ASSERT_EQUAL(0, status);
        1:  156:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_maxLimit, vet_maxLimit, 20);
        1:  157:}
------------------
TEST_Sort_maxLimitBubble_:
function TEST_Sort_maxLimitBubble_ called 1 returned 100% blocks executed 100%
        1:  152:TEST(Sort, maxLimitBubble) {
        1:  153:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  154:    int status = sort(vet_maxLimit, 20, complexity2, BUBBLE);
call    0 returned 100%
        1:  155:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  156:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_maxLimit, vet_maxLimit, 20);
call    0 returned 100%
        1:  157:}
------------------
TEST_Sort_maxLimitBubble_run:
function TEST_Sort_maxLimitBubble_run called 1 returned 100% blocks executed 100%
        1:  152:TEST(Sort, maxLimitBubble) {
call    0 returned 100%
------------------
        -:  158:
        2:  159:TEST(Sort, aboveLimitBubble) {
        1:  160:    int vet_above[21] = {14, 3, 20, 7, 1, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16,21, 13, 9, 18, 15};
        1:  161:    int status = sort(vet_above, 21, complexity2, BUBBLE);
        1:  162:    TEST_ASSERT_EQUAL(1, status);
        1:  163:}
------------------
TEST_Sort_aboveLimitBubble_:
function TEST_Sort_aboveLimitBubble_ called 1 returned 100% blocks executed 100%
        1:  159:TEST(Sort, aboveLimitBubble) {
        1:  160:    int vet_above[21] = {14, 3, 20, 7, 1, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16,21, 13, 9, 18, 15};
        1:  161:    int status = sort(vet_above, 21, complexity2, BUBBLE);
call    0 returned 100%
        1:  162:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:  163:}
------------------
TEST_Sort_aboveLimitBubble_run:
function TEST_Sort_aboveLimitBubble_run called 1 returned 100% blocks executed 100%
        1:  159:TEST(Sort, aboveLimitBubble) {
call    0 returned 100%
------------------
        -:  164:
        2:  165:TEST(Sort, WrongTypeBubble) {
        1:  166:    int vet_ok[3] = {1,5,0};
        1:  167:    int status = sort(vet_ok, 3, complexity1, BUBBLE);
        1:  168:    TEST_ASSERT_EQUAL(1, status);
        1:  169:}
------------------
TEST_Sort_WrongTypeBubble_:
function TEST_Sort_WrongTypeBubble_ called 1 returned 100% blocks executed 100%
        1:  165:TEST(Sort, WrongTypeBubble) {
        1:  166:    int vet_ok[3] = {1,5,0};
        1:  167:    int status = sort(vet_ok, 3, complexity1, BUBBLE);
call    0 returned 100%
        1:  168:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:  169:}
------------------
TEST_Sort_WrongTypeBubble_run:
function TEST_Sort_WrongTypeBubble_run called 1 returned 100% blocks executed 100%
        1:  165:TEST(Sort, WrongTypeBubble) {
call    0 returned 100%
------------------
        -:  170:
        -:  171:
        2:  172:TEST(Sort, WrongLenghtBubble) {
        1:  173:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  174:    int vet_less[20] = {0, 3, 7, 14, 20, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  175:    int status = sort(vet_maxLimit, 5, complexity2, BUBBLE);
        1:  176:    TEST_ASSERT_EQUAL(0, status);
        1:  177:    TEST_ASSERT_EQUAL_INT_ARRAY(vet_maxLimit, vet_less, 20);
        1:  178:}
------------------
TEST_Sort_WrongLenghtBubble_:
function TEST_Sort_WrongLenghtBubble_ called 1 returned 100% blocks executed 100%
        1:  172:TEST(Sort, WrongLenghtBubble) {
        1:  173:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  174:    int vet_less[20] = {0, 3, 7, 14, 20, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  175:    int status = sort(vet_maxLimit, 5, complexity2, BUBBLE);
call    0 returned 100%
        1:  176:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  177:    TEST_ASSERT_EQUAL_INT_ARRAY(vet_maxLimit, vet_less, 20);
call    0 returned 100%
        1:  178:}
------------------
TEST_Sort_WrongLenghtBubble_run:
function TEST_Sort_WrongLenghtBubble_run called 1 returned 100% blocks executed 100%
        1:  172:TEST(Sort, WrongLenghtBubble) {
call    0 returned 100%
------------------
        -:  179:
        -:  180:
        -:  181:
        -:  182://insertion
        -:  183:
        -:  184:
        2:  185:TEST(Sort, AllCorrectInsertion) {
        1:  186:    int vet_ok[3] = {1,5,0};
        1:  187:    int status = sort(vet_ok, 3, complexity2, INSERTION);
        1:  188:    TEST_ASSERT_EQUAL(0, status);
        1:  189:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_ok, vet_ok, 3);
        1:  190:}
------------------
TEST_Sort_AllCorrectInsertion_:
function TEST_Sort_AllCorrectInsertion_ called 1 returned 100% blocks executed 100%
        1:  185:TEST(Sort, AllCorrectInsertion) {
        1:  186:    int vet_ok[3] = {1,5,0};
        1:  187:    int status = sort(vet_ok, 3, complexity2, INSERTION);
call    0 returned 100%
        1:  188:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  189:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_ok, vet_ok, 3);
call    0 returned 100%
        1:  190:}
------------------
TEST_Sort_AllCorrectInsertion_run:
function TEST_Sort_AllCorrectInsertion_run called 1 returned 100% blocks executed 100%
        1:  185:TEST(Sort, AllCorrectInsertion) {
call    0 returned 100%
------------------
        -:  191:
        2:  192:TEST(Sort, BellowLimitInsertion) {
        1:  193:    int vet_bellow[1] = {1};
        1:  194:    int status = sort(vet_bellow, 1, complexity1, INSERTION);
        1:  195:    TEST_ASSERT_EQUAL(1, status);
        1:  196:}
------------------
TEST_Sort_BellowLimitInsertion_:
function TEST_Sort_BellowLimitInsertion_ called 1 returned 100% blocks executed 100%
        1:  192:TEST(Sort, BellowLimitInsertion) {
        1:  193:    int vet_bellow[1] = {1};
        1:  194:    int status = sort(vet_bellow, 1, complexity1, INSERTION);
call    0 returned 100%
        1:  195:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:  196:}
------------------
TEST_Sort_BellowLimitInsertion_run:
function TEST_Sort_BellowLimitInsertion_run called 1 returned 100% blocks executed 100%
        1:  192:TEST(Sort, BellowLimitInsertion) {
call    0 returned 100%
------------------
        -:  197:
        2:  198:TEST(Sort, minLimitInsertion) {
        1:  199:    int vet_minLimit[2] = {15,7};
        1:  200:    int status = sort(vet_minLimit, 2, complexity2, INSERTION);
        1:  201:    TEST_ASSERT_EQUAL(0, status);
        1:  202:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_minLimit, vet_minLimit, 2);
        1:  203:}
------------------
TEST_Sort_minLimitInsertion_:
function TEST_Sort_minLimitInsertion_ called 1 returned 100% blocks executed 100%
        1:  198:TEST(Sort, minLimitInsertion) {
        1:  199:    int vet_minLimit[2] = {15,7};
        1:  200:    int status = sort(vet_minLimit, 2, complexity2, INSERTION);
call    0 returned 100%
        1:  201:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  202:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_minLimit, vet_minLimit, 2);
call    0 returned 100%
        1:  203:}
------------------
TEST_Sort_minLimitInsertion_run:
function TEST_Sort_minLimitInsertion_run called 1 returned 100% blocks executed 100%
        1:  198:TEST(Sort, minLimitInsertion) {
call    0 returned 100%
------------------
        -:  204:
        2:  205:TEST(Sort, maxLimitInsertion) {
        1:  206:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  207:    int status = sort(vet_maxLimit, 20, complexity2, INSERTION);
        1:  208:    TEST_ASSERT_EQUAL(0, status);
        1:  209:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_maxLimit, vet_maxLimit, 20);
        1:  210:}
------------------
TEST_Sort_maxLimitInsertion_:
function TEST_Sort_maxLimitInsertion_ called 1 returned 100% blocks executed 100%
        1:  205:TEST(Sort, maxLimitInsertion) {
        1:  206:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  207:    int status = sort(vet_maxLimit, 20, complexity2, INSERTION);
call    0 returned 100%
        1:  208:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  209:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_maxLimit, vet_maxLimit, 20);
call    0 returned 100%
        1:  210:}
------------------
TEST_Sort_maxLimitInsertion_run:
function TEST_Sort_maxLimitInsertion_run called 1 returned 100% blocks executed 100%
        1:  205:TEST(Sort, maxLimitInsertion) {
call    0 returned 100%
------------------
        -:  211:
        2:  212:TEST(Sort, aboveLimitInsertion) {
        1:  213:    int vet_above[21] = {14, 3, 20, 7, 1, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16,21, 13, 9, 18, 15};
        1:  214:    int status = sort(vet_above, 21, complexity2, INSERTION);
        1:  215:    TEST_ASSERT_EQUAL(1, status);
        1:  216:}
------------------
TEST_Sort_aboveLimitInsertion_:
function TEST_Sort_aboveLimitInsertion_ called 1 returned 100% blocks executed 100%
        1:  212:TEST(Sort, aboveLimitInsertion) {
        1:  213:    int vet_above[21] = {14, 3, 20, 7, 1, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16,21, 13, 9, 18, 15};
        1:  214:    int status = sort(vet_above, 21, complexity2, INSERTION);
call    0 returned 100%
        1:  215:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:  216:}
------------------
TEST_Sort_aboveLimitInsertion_run:
function TEST_Sort_aboveLimitInsertion_run called 1 returned 100% blocks executed 100%
        1:  212:TEST(Sort, aboveLimitInsertion) {
call    0 returned 100%
------------------
        -:  217:
        2:  218:TEST(Sort, WrongTypeInsertion) {
        1:  219:    int vet_ok[3] = {1,5,0};
        1:  220:    int status = sort(vet_ok, 3, complexity1, INSERTION);
        1:  221:    TEST_ASSERT_EQUAL(1, status);
        1:  222:}
------------------
TEST_Sort_WrongTypeInsertion_:
function TEST_Sort_WrongTypeInsertion_ called 1 returned 100% blocks executed 100%
        1:  218:TEST(Sort, WrongTypeInsertion) {
        1:  219:    int vet_ok[3] = {1,5,0};
        1:  220:    int status = sort(vet_ok, 3, complexity1, INSERTION);
call    0 returned 100%
        1:  221:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:  222:}
------------------
TEST_Sort_WrongTypeInsertion_run:
function TEST_Sort_WrongTypeInsertion_run called 1 returned 100% blocks executed 100%
        1:  218:TEST(Sort, WrongTypeInsertion) {
call    0 returned 100%
------------------
        -:  223:
        -:  224:
        2:  225:TEST(Sort, WrongLenghtInsertion) {
        1:  226:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  227:    int vet_less[20] = {0, 3, 7, 14, 20, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  228:    int status = sort(vet_maxLimit, 5, complexity2, INSERTION);
        1:  229:    TEST_ASSERT_EQUAL(0, status);
        1:  230:    TEST_ASSERT_EQUAL_INT_ARRAY(vet_maxLimit, vet_less, 20);
        1:  231:}
------------------
TEST_Sort_WrongLenghtInsertion_:
function TEST_Sort_WrongLenghtInsertion_ called 1 returned 100% blocks executed 100%
        1:  225:TEST(Sort, WrongLenghtInsertion) {
        1:  226:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  227:    int vet_less[20] = {0, 3, 7, 14, 20, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  228:    int status = sort(vet_maxLimit, 5, complexity2, INSERTION);
call    0 returned 100%
        1:  229:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  230:    TEST_ASSERT_EQUAL_INT_ARRAY(vet_maxLimit, vet_less, 20);
call    0 returned 100%
        1:  231:}
------------------
TEST_Sort_WrongLenghtInsertion_run:
function TEST_Sort_WrongLenghtInsertion_run called 1 returned 100% blocks executed 100%
        1:  225:TEST(Sort, WrongLenghtInsertion) {
call    0 returned 100%
------------------
        -:  232:
        -:  233:
        -:  234://selection
        -:  235:
        2:  236:TEST(Sort, AllCorrectSelection) {
        1:  237:    int vet_ok[3] = {1,5,0};
        1:  238:    int status = sort(vet_ok, 3, complexity2, SELECTION);
        1:  239:    TEST_ASSERT_EQUAL(0, status);
        1:  240:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_ok, vet_ok, 3);
        1:  241:}
------------------
TEST_Sort_AllCorrectSelection_:
function TEST_Sort_AllCorrectSelection_ called 1 returned 100% blocks executed 100%
        1:  236:TEST(Sort, AllCorrectSelection) {
        1:  237:    int vet_ok[3] = {1,5,0};
        1:  238:    int status = sort(vet_ok, 3, complexity2, SELECTION);
call    0 returned 100%
        1:  239:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  240:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_ok, vet_ok, 3);
call    0 returned 100%
        1:  241:}
------------------
TEST_Sort_AllCorrectSelection_run:
function TEST_Sort_AllCorrectSelection_run called 1 returned 100% blocks executed 100%
        1:  236:TEST(Sort, AllCorrectSelection) {
call    0 returned 100%
------------------
        -:  242:
        2:  243:TEST(Sort, BellowLimitSelection) {
        1:  244:    int vet_bellow[1] = {1};
        1:  245:    int status = sort(vet_bellow, 1, complexity1, SELECTION);
        1:  246:    TEST_ASSERT_EQUAL(1, status);
        1:  247:}
------------------
TEST_Sort_BellowLimitSelection_:
function TEST_Sort_BellowLimitSelection_ called 1 returned 100% blocks executed 100%
        1:  243:TEST(Sort, BellowLimitSelection) {
        1:  244:    int vet_bellow[1] = {1};
        1:  245:    int status = sort(vet_bellow, 1, complexity1, SELECTION);
call    0 returned 100%
        1:  246:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:  247:}
------------------
TEST_Sort_BellowLimitSelection_run:
function TEST_Sort_BellowLimitSelection_run called 1 returned 100% blocks executed 100%
        1:  243:TEST(Sort, BellowLimitSelection) {
call    0 returned 100%
------------------
        -:  248:
        2:  249:TEST(Sort, minLimitSelection) {
        1:  250:    int vet_minLimit[2] = {15,7};
        1:  251:    int status = sort(vet_minLimit, 2, complexity2, SELECTION);
        1:  252:    TEST_ASSERT_EQUAL(0, status);
        1:  253:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_minLimit, vet_minLimit, 2);
        1:  254:}
------------------
TEST_Sort_minLimitSelection_:
function TEST_Sort_minLimitSelection_ called 1 returned 100% blocks executed 100%
        1:  249:TEST(Sort, minLimitSelection) {
        1:  250:    int vet_minLimit[2] = {15,7};
        1:  251:    int status = sort(vet_minLimit, 2, complexity2, SELECTION);
call    0 returned 100%
        1:  252:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  253:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_minLimit, vet_minLimit, 2);
call    0 returned 100%
        1:  254:}
------------------
TEST_Sort_minLimitSelection_run:
function TEST_Sort_minLimitSelection_run called 1 returned 100% blocks executed 100%
        1:  249:TEST(Sort, minLimitSelection) {
call    0 returned 100%
------------------
        -:  255:
        2:  256:TEST(Sort, maxLimitSelection) {
        1:  257:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  258:    int status = sort(vet_maxLimit, 20, complexity2, SELECTION);
        1:  259:    TEST_ASSERT_EQUAL(0, status);
        1:  260:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_maxLimit, vet_maxLimit, 20);
        1:  261:}
------------------
TEST_Sort_maxLimitSelection_:
function TEST_Sort_maxLimitSelection_ called 1 returned 100% blocks executed 100%
        1:  256:TEST(Sort, maxLimitSelection) {
        1:  257:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  258:    int status = sort(vet_maxLimit, 20, complexity2, SELECTION);
call    0 returned 100%
        1:  259:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  260:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_maxLimit, vet_maxLimit, 20);
call    0 returned 100%
        1:  261:}
------------------
TEST_Sort_maxLimitSelection_run:
function TEST_Sort_maxLimitSelection_run called 1 returned 100% blocks executed 100%
        1:  256:TEST(Sort, maxLimitSelection) {
call    0 returned 100%
------------------
        -:  262:
        2:  263:TEST(Sort, aboveLimitSelection) {
        1:  264:    int vet_above[21] = {14, 3, 20, 7, 1, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16,21, 13, 9, 18, 15};
        1:  265:    int status = sort(vet_above, 21, complexity2, SELECTION);
        1:  266:    TEST_ASSERT_EQUAL(1, status);
        1:  267:}
------------------
TEST_Sort_aboveLimitSelection_:
function TEST_Sort_aboveLimitSelection_ called 1 returned 100% blocks executed 100%
        1:  263:TEST(Sort, aboveLimitSelection) {
        1:  264:    int vet_above[21] = {14, 3, 20, 7, 1, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16,21, 13, 9, 18, 15};
        1:  265:    int status = sort(vet_above, 21, complexity2, SELECTION);
call    0 returned 100%
        1:  266:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:  267:}
------------------
TEST_Sort_aboveLimitSelection_run:
function TEST_Sort_aboveLimitSelection_run called 1 returned 100% blocks executed 100%
        1:  263:TEST(Sort, aboveLimitSelection) {
call    0 returned 100%
------------------
        -:  268:
        2:  269:TEST(Sort, WrongTypeSelection) {
        1:  270:    int vet_ok[3] = {1,5,0};
        1:  271:    int status = sort(vet_ok, 3, complexity1, SELECTION);
        1:  272:    TEST_ASSERT_EQUAL(1, status);
        1:  273:}
------------------
TEST_Sort_WrongTypeSelection_:
function TEST_Sort_WrongTypeSelection_ called 1 returned 100% blocks executed 100%
        1:  269:TEST(Sort, WrongTypeSelection) {
        1:  270:    int vet_ok[3] = {1,5,0};
        1:  271:    int status = sort(vet_ok, 3, complexity1, SELECTION);
call    0 returned 100%
        1:  272:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:  273:}
------------------
TEST_Sort_WrongTypeSelection_run:
function TEST_Sort_WrongTypeSelection_run called 1 returned 100% blocks executed 100%
        1:  269:TEST(Sort, WrongTypeSelection) {
call    0 returned 100%
------------------
        -:  274:
        -:  275:
        2:  276:TEST(Sort, WrongLenghtSelection) {
        1:  277:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  278:    int vet_less[20] = {0, 3, 7, 14, 20, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  279:    int status = sort(vet_maxLimit, 5, complexity2, SELECTION);
        1:  280:    TEST_ASSERT_EQUAL(0, status);
        1:  281:    TEST_ASSERT_EQUAL_INT_ARRAY(vet_maxLimit, vet_less, 20);
        1:  282:}
------------------
TEST_Sort_WrongLenghtSelection_:
function TEST_Sort_WrongLenghtSelection_ called 1 returned 100% blocks executed 100%
        1:  276:TEST(Sort, WrongLenghtSelection) {
        1:  277:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  278:    int vet_less[20] = {0, 3, 7, 14, 20, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  279:    int status = sort(vet_maxLimit, 5, complexity2, SELECTION);
call    0 returned 100%
        1:  280:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  281:    TEST_ASSERT_EQUAL_INT_ARRAY(vet_maxLimit, vet_less, 20);
call    0 returned 100%
        1:  282:}
------------------
TEST_Sort_WrongLenghtSelection_run:
function TEST_Sort_WrongLenghtSelection_run called 1 returned 100% blocks executed 100%
        1:  276:TEST(Sort, WrongLenghtSelection) {
call    0 returned 100%
------------------
        -:  283:
        -:  284://heap 
        -:  285:
        -:  286:
        2:  287:TEST(Sort, AllCorrectHeap) {
        1:  288:    int vet_ok[3] = {1,5,0};
        1:  289:    int status = sort(vet_ok, 3, complexity3, HEAP);
        1:  290:    TEST_ASSERT_EQUAL(0, status);
        1:  291:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_ok, vet_ok, 3);
        1:  292:}
------------------
TEST_Sort_AllCorrectHeap_:
function TEST_Sort_AllCorrectHeap_ called 1 returned 100% blocks executed 100%
        1:  287:TEST(Sort, AllCorrectHeap) {
        1:  288:    int vet_ok[3] = {1,5,0};
        1:  289:    int status = sort(vet_ok, 3, complexity3, HEAP);
call    0 returned 100%
        1:  290:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  291:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_ok, vet_ok, 3);
call    0 returned 100%
        1:  292:}
------------------
TEST_Sort_AllCorrectHeap_run:
function TEST_Sort_AllCorrectHeap_run called 1 returned 100% blocks executed 100%
        1:  287:TEST(Sort, AllCorrectHeap) {
call    0 returned 100%
------------------
        -:  293:
        2:  294:TEST(Sort, BellowLimitHeap) {
        1:  295:    int vet_bellow[1] = {1};
        1:  296:    int status = sort(vet_bellow, 1, complexity1, HEAP);
        1:  297:    TEST_ASSERT_EQUAL(1, status);
        1:  298:}
------------------
TEST_Sort_BellowLimitHeap_:
function TEST_Sort_BellowLimitHeap_ called 1 returned 100% blocks executed 100%
        1:  294:TEST(Sort, BellowLimitHeap) {
        1:  295:    int vet_bellow[1] = {1};
        1:  296:    int status = sort(vet_bellow, 1, complexity1, HEAP);
call    0 returned 100%
        1:  297:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:  298:}
------------------
TEST_Sort_BellowLimitHeap_run:
function TEST_Sort_BellowLimitHeap_run called 1 returned 100% blocks executed 100%
        1:  294:TEST(Sort, BellowLimitHeap) {
call    0 returned 100%
------------------
        -:  299:
        2:  300:TEST(Sort, minLimitHeap) {
        1:  301:    int vet_minLimit[2] = {15,7};
        1:  302:    int status = sort(vet_minLimit, 2, complexity3, HEAP);
        1:  303:    TEST_ASSERT_EQUAL(0, status);
        1:  304:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_minLimit, vet_minLimit, 2);
        1:  305:}
------------------
TEST_Sort_minLimitHeap_:
function TEST_Sort_minLimitHeap_ called 1 returned 100% blocks executed 100%
        1:  300:TEST(Sort, minLimitHeap) {
        1:  301:    int vet_minLimit[2] = {15,7};
        1:  302:    int status = sort(vet_minLimit, 2, complexity3, HEAP);
call    0 returned 100%
        1:  303:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  304:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_minLimit, vet_minLimit, 2);
call    0 returned 100%
        1:  305:}
------------------
TEST_Sort_minLimitHeap_run:
function TEST_Sort_minLimitHeap_run called 1 returned 100% blocks executed 100%
        1:  300:TEST(Sort, minLimitHeap) {
call    0 returned 100%
------------------
        -:  306:
        2:  307:TEST(Sort, maxLimitHeap) {
        1:  308:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  309:    int status = sort(vet_maxLimit, 20, complexity3, HEAP);
        1:  310:    TEST_ASSERT_EQUAL(0, status);
        1:  311:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_maxLimit, vet_maxLimit, 20);
        1:  312:}
------------------
TEST_Sort_maxLimitHeap_:
function TEST_Sort_maxLimitHeap_ called 1 returned 100% blocks executed 100%
        1:  307:TEST(Sort, maxLimitHeap) {
        1:  308:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  309:    int status = sort(vet_maxLimit, 20, complexity3, HEAP);
call    0 returned 100%
        1:  310:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  311:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_maxLimit, vet_maxLimit, 20);
call    0 returned 100%
        1:  312:}
------------------
TEST_Sort_maxLimitHeap_run:
function TEST_Sort_maxLimitHeap_run called 1 returned 100% blocks executed 100%
        1:  307:TEST(Sort, maxLimitHeap) {
call    0 returned 100%
------------------
        -:  313:
        2:  314:TEST(Sort, aboveLimitHeap) {
        1:  315:    int vet_above[21] = {14, 3, 20, 7, 1, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16,21, 13, 9, 18, 15};
        1:  316:    int status = sort(vet_above, 21, complexity3, HEAP);
        1:  317:    TEST_ASSERT_EQUAL(1, status);
        1:  318:}
------------------
TEST_Sort_aboveLimitHeap_:
function TEST_Sort_aboveLimitHeap_ called 1 returned 100% blocks executed 100%
        1:  314:TEST(Sort, aboveLimitHeap) {
        1:  315:    int vet_above[21] = {14, 3, 20, 7, 1, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16,21, 13, 9, 18, 15};
        1:  316:    int status = sort(vet_above, 21, complexity3, HEAP);
call    0 returned 100%
        1:  317:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:  318:}
------------------
TEST_Sort_aboveLimitHeap_run:
function TEST_Sort_aboveLimitHeap_run called 1 returned 100% blocks executed 100%
        1:  314:TEST(Sort, aboveLimitHeap) {
call    0 returned 100%
------------------
        -:  319:
        2:  320:TEST(Sort, WrongTypeHeap) {
        1:  321:    int vet_ok[3] = {1,5,0};
        1:  322:    int status = sort(vet_ok, 3, complexity1, HEAP);
        1:  323:    TEST_ASSERT_EQUAL(1, status);
        1:  324:}
------------------
TEST_Sort_WrongTypeHeap_:
function TEST_Sort_WrongTypeHeap_ called 1 returned 100% blocks executed 100%
        1:  320:TEST(Sort, WrongTypeHeap) {
        1:  321:    int vet_ok[3] = {1,5,0};
        1:  322:    int status = sort(vet_ok, 3, complexity1, HEAP);
call    0 returned 100%
        1:  323:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:  324:}
------------------
TEST_Sort_WrongTypeHeap_run:
function TEST_Sort_WrongTypeHeap_run called 1 returned 100% blocks executed 100%
        1:  320:TEST(Sort, WrongTypeHeap) {
call    0 returned 100%
------------------
        -:  325:
        -:  326:
        2:  327:TEST(Sort, WrongLenghtHeap) {
        1:  328:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  329:    int vet_less[20] = {0, 3, 7, 14, 20, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  330:    int status = sort(vet_maxLimit, 5, complexity3, HEAP);
        1:  331:    TEST_ASSERT_EQUAL(0, status);
        1:  332:    TEST_ASSERT_EQUAL_INT_ARRAY(vet_maxLimit, vet_less, 20);
        1:  333:}
------------------
TEST_Sort_WrongLenghtHeap_:
function TEST_Sort_WrongLenghtHeap_ called 1 returned 100% blocks executed 100%
        1:  327:TEST(Sort, WrongLenghtHeap) {
        1:  328:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  329:    int vet_less[20] = {0, 3, 7, 14, 20, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  330:    int status = sort(vet_maxLimit, 5, complexity3, HEAP);
call    0 returned 100%
        1:  331:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  332:    TEST_ASSERT_EQUAL_INT_ARRAY(vet_maxLimit, vet_less, 20);
call    0 returned 100%
        1:  333:}
------------------
TEST_Sort_WrongLenghtHeap_run:
function TEST_Sort_WrongLenghtHeap_run called 1 returned 100% blocks executed 100%
        1:  327:TEST(Sort, WrongLenghtHeap) {
call    0 returned 100%
------------------
        -:  334:
        -:  335:
        -:  336://merge
        -:  337:
        2:  338:TEST(Sort, AllCorrectMerge) {
        1:  339:    int vet_ok[3] = {1,5,0};
        1:  340:    int status = sort(vet_ok, 3, complexity3, MERGE);
        1:  341:    TEST_ASSERT_EQUAL(0, status);
        1:  342:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_ok, vet_ok, 3);
        1:  343:}
------------------
TEST_Sort_AllCorrectMerge_:
function TEST_Sort_AllCorrectMerge_ called 1 returned 100% blocks executed 100%
        1:  338:TEST(Sort, AllCorrectMerge) {
        1:  339:    int vet_ok[3] = {1,5,0};
        1:  340:    int status = sort(vet_ok, 3, complexity3, MERGE);
call    0 returned 100%
        1:  341:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  342:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_ok, vet_ok, 3);
call    0 returned 100%
        1:  343:}
------------------
TEST_Sort_AllCorrectMerge_run:
function TEST_Sort_AllCorrectMerge_run called 1 returned 100% blocks executed 100%
        1:  338:TEST(Sort, AllCorrectMerge) {
call    0 returned 100%
------------------
        -:  344:
        2:  345:TEST(Sort, BellowLimitMerge) {
        1:  346:    int vet_bellow[1] = {1};
        1:  347:    int status = sort(vet_bellow, 1, complexity1, MERGE);
        1:  348:    TEST_ASSERT_EQUAL(1, status);
        1:  349:}
------------------
TEST_Sort_BellowLimitMerge_:
function TEST_Sort_BellowLimitMerge_ called 1 returned 100% blocks executed 100%
        1:  345:TEST(Sort, BellowLimitMerge) {
        1:  346:    int vet_bellow[1] = {1};
        1:  347:    int status = sort(vet_bellow, 1, complexity1, MERGE);
call    0 returned 100%
        1:  348:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:  349:}
------------------
TEST_Sort_BellowLimitMerge_run:
function TEST_Sort_BellowLimitMerge_run called 1 returned 100% blocks executed 100%
        1:  345:TEST(Sort, BellowLimitMerge) {
call    0 returned 100%
------------------
        -:  350:
        2:  351:TEST(Sort, minLimitMerge) {
        1:  352:    int vet_minLimit[2] = {15,7};
        1:  353:    int status = sort(vet_minLimit, 2, complexity3, MERGE);
        1:  354:    TEST_ASSERT_EQUAL(0, status);
        1:  355:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_minLimit, vet_minLimit, 2);
        1:  356:}
------------------
TEST_Sort_minLimitMerge_:
function TEST_Sort_minLimitMerge_ called 1 returned 100% blocks executed 100%
        1:  351:TEST(Sort, minLimitMerge) {
        1:  352:    int vet_minLimit[2] = {15,7};
        1:  353:    int status = sort(vet_minLimit, 2, complexity3, MERGE);
call    0 returned 100%
        1:  354:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  355:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_minLimit, vet_minLimit, 2);
call    0 returned 100%
        1:  356:}
------------------
TEST_Sort_minLimitMerge_run:
function TEST_Sort_minLimitMerge_run called 1 returned 100% blocks executed 100%
        1:  351:TEST(Sort, minLimitMerge) {
call    0 returned 100%
------------------
        -:  357:
        2:  358:TEST(Sort, maxLimitMerge) {
        1:  359:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  360:    int status = sort(vet_maxLimit, 20, complexity3, MERGE);
        1:  361:    TEST_ASSERT_EQUAL(0, status);
        1:  362:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_maxLimit, vet_maxLimit, 20);
        1:  363:}
------------------
TEST_Sort_maxLimitMerge_:
function TEST_Sort_maxLimitMerge_ called 1 returned 100% blocks executed 100%
        1:  358:TEST(Sort, maxLimitMerge) {
        1:  359:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  360:    int status = sort(vet_maxLimit, 20, complexity3, MERGE);
call    0 returned 100%
        1:  361:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  362:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_maxLimit, vet_maxLimit, 20);
call    0 returned 100%
        1:  363:}
------------------
TEST_Sort_maxLimitMerge_run:
function TEST_Sort_maxLimitMerge_run called 1 returned 100% blocks executed 100%
        1:  358:TEST(Sort, maxLimitMerge) {
call    0 returned 100%
------------------
        -:  364:
        2:  365:TEST(Sort, aboveLimitMerge) {
        1:  366:    int vet_above[21] = {14, 3, 20, 7, 1, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16,21, 13, 9, 18, 15};
        1:  367:    int status = sort(vet_above, 21, complexity3, MERGE);
        1:  368:    TEST_ASSERT_EQUAL(1, status);
        1:  369:}
------------------
TEST_Sort_aboveLimitMerge_:
function TEST_Sort_aboveLimitMerge_ called 1 returned 100% blocks executed 100%
        1:  365:TEST(Sort, aboveLimitMerge) {
        1:  366:    int vet_above[21] = {14, 3, 20, 7, 1, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16,21, 13, 9, 18, 15};
        1:  367:    int status = sort(vet_above, 21, complexity3, MERGE);
call    0 returned 100%
        1:  368:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:  369:}
------------------
TEST_Sort_aboveLimitMerge_run:
function TEST_Sort_aboveLimitMerge_run called 1 returned 100% blocks executed 100%
        1:  365:TEST(Sort, aboveLimitMerge) {
call    0 returned 100%
------------------
        -:  370:
        2:  371:TEST(Sort, WrongTypeMerge) {
        1:  372:    int vet_ok[3] = {1,5,0};
        1:  373:    int status = sort(vet_ok, 3, complexity1, MERGE);
        1:  374:    TEST_ASSERT_EQUAL(1, status);
        1:  375:}
------------------
TEST_Sort_WrongTypeMerge_:
function TEST_Sort_WrongTypeMerge_ called 1 returned 100% blocks executed 100%
        1:  371:TEST(Sort, WrongTypeMerge) {
        1:  372:    int vet_ok[3] = {1,5,0};
        1:  373:    int status = sort(vet_ok, 3, complexity1, MERGE);
call    0 returned 100%
        1:  374:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:  375:}
------------------
TEST_Sort_WrongTypeMerge_run:
function TEST_Sort_WrongTypeMerge_run called 1 returned 100% blocks executed 100%
        1:  371:TEST(Sort, WrongTypeMerge) {
call    0 returned 100%
------------------
        -:  376:
        -:  377:
        2:  378:TEST(Sort, WrongLenghtMerge) {
        1:  379:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  380:    int vet_less[20] = {0, 3, 7, 14, 20, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  381:    int status = sort(vet_maxLimit, 5, complexity3, MERGE);
        1:  382:    TEST_ASSERT_EQUAL(0, status);
        1:  383:    TEST_ASSERT_EQUAL_INT_ARRAY(vet_maxLimit, vet_less, 20);
        1:  384:}
------------------
TEST_Sort_WrongLenghtMerge_:
function TEST_Sort_WrongLenghtMerge_ called 1 returned 100% blocks executed 100%
        1:  378:TEST(Sort, WrongLenghtMerge) {
        1:  379:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  380:    int vet_less[20] = {0, 3, 7, 14, 20, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  381:    int status = sort(vet_maxLimit, 5, complexity3, MERGE);
call    0 returned 100%
        1:  382:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  383:    TEST_ASSERT_EQUAL_INT_ARRAY(vet_maxLimit, vet_less, 20);
call    0 returned 100%
        1:  384:}
------------------
TEST_Sort_WrongLenghtMerge_run:
function TEST_Sort_WrongLenghtMerge_run called 1 returned 100% blocks executed 100%
        1:  378:TEST(Sort, WrongLenghtMerge) {
call    0 returned 100%
------------------
        -:  385:
        -:  386://quick
        -:  387:
        2:  388:TEST(Sort, AllCorrectQuick) {
        1:  389:    int vet_ok[3] = {1,5,0};
        1:  390:    int status = sort(vet_ok, 3, complexity3, QUICK);
        1:  391:    TEST_ASSERT_EQUAL(0, status);
        1:  392:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_ok, vet_ok, 3);
        1:  393:}
------------------
TEST_Sort_AllCorrectQuick_:
function TEST_Sort_AllCorrectQuick_ called 1 returned 100% blocks executed 100%
        1:  388:TEST(Sort, AllCorrectQuick) {
        1:  389:    int vet_ok[3] = {1,5,0};
        1:  390:    int status = sort(vet_ok, 3, complexity3, QUICK);
call    0 returned 100%
        1:  391:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  392:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_ok, vet_ok, 3);
call    0 returned 100%
        1:  393:}
------------------
TEST_Sort_AllCorrectQuick_run:
function TEST_Sort_AllCorrectQuick_run called 1 returned 100% blocks executed 100%
        1:  388:TEST(Sort, AllCorrectQuick) {
call    0 returned 100%
------------------
        -:  394:
        2:  395:TEST(Sort, BellowLimitQuick) {
        1:  396:    int vet_bellow[1] = {1};
        1:  397:    int status = sort(vet_bellow, 1, complexity1, QUICK);
        1:  398:    TEST_ASSERT_EQUAL(1, status);
        1:  399:}
------------------
TEST_Sort_BellowLimitQuick_:
function TEST_Sort_BellowLimitQuick_ called 1 returned 100% blocks executed 100%
        1:  395:TEST(Sort, BellowLimitQuick) {
        1:  396:    int vet_bellow[1] = {1};
        1:  397:    int status = sort(vet_bellow, 1, complexity1, QUICK);
call    0 returned 100%
        1:  398:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:  399:}
------------------
TEST_Sort_BellowLimitQuick_run:
function TEST_Sort_BellowLimitQuick_run called 1 returned 100% blocks executed 100%
        1:  395:TEST(Sort, BellowLimitQuick) {
call    0 returned 100%
------------------
        -:  400:
        2:  401:TEST(Sort, minLimitQuick) {
        1:  402:    int vet_minLimit[2] = {15,7};
        1:  403:    int status = sort(vet_minLimit, 2, complexity3, QUICK);
        1:  404:    TEST_ASSERT_EQUAL(0, status);
        1:  405:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_minLimit, vet_minLimit, 2);
        1:  406:}
------------------
TEST_Sort_minLimitQuick_:
function TEST_Sort_minLimitQuick_ called 1 returned 100% blocks executed 100%
        1:  401:TEST(Sort, minLimitQuick) {
        1:  402:    int vet_minLimit[2] = {15,7};
        1:  403:    int status = sort(vet_minLimit, 2, complexity3, QUICK);
call    0 returned 100%
        1:  404:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  405:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_minLimit, vet_minLimit, 2);
call    0 returned 100%
        1:  406:}
------------------
TEST_Sort_minLimitQuick_run:
function TEST_Sort_minLimitQuick_run called 1 returned 100% blocks executed 100%
        1:  401:TEST(Sort, minLimitQuick) {
call    0 returned 100%
------------------
        -:  407:
        2:  408:TEST(Sort, maxLimitQuick) {
        1:  409:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  410:    int status = sort(vet_maxLimit, 20, complexity3, QUICK);
        1:  411:    TEST_ASSERT_EQUAL(0, status);
        1:  412:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_maxLimit, vet_maxLimit, 20);
        1:  413:}
------------------
TEST_Sort_maxLimitQuick_:
function TEST_Sort_maxLimitQuick_ called 1 returned 100% blocks executed 100%
        1:  408:TEST(Sort, maxLimitQuick) {
        1:  409:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  410:    int status = sort(vet_maxLimit, 20, complexity3, QUICK);
call    0 returned 100%
        1:  411:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  412:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_maxLimit, vet_maxLimit, 20);
call    0 returned 100%
        1:  413:}
------------------
TEST_Sort_maxLimitQuick_run:
function TEST_Sort_maxLimitQuick_run called 1 returned 100% blocks executed 100%
        1:  408:TEST(Sort, maxLimitQuick) {
call    0 returned 100%
------------------
        -:  414:
        2:  415:TEST(Sort, aboveLimitQuick) {
        1:  416:    int vet_above[21] = {14, 3, 20, 7, 1, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16,21, 13, 9, 18, 15};
        1:  417:    int status = sort(vet_above, 21, complexity3, QUICK);
        1:  418:    TEST_ASSERT_EQUAL(1, status);
        1:  419:}
------------------
TEST_Sort_aboveLimitQuick_:
function TEST_Sort_aboveLimitQuick_ called 1 returned 100% blocks executed 100%
        1:  415:TEST(Sort, aboveLimitQuick) {
        1:  416:    int vet_above[21] = {14, 3, 20, 7, 1, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16,21, 13, 9, 18, 15};
        1:  417:    int status = sort(vet_above, 21, complexity3, QUICK);
call    0 returned 100%
        1:  418:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:  419:}
------------------
TEST_Sort_aboveLimitQuick_run:
function TEST_Sort_aboveLimitQuick_run called 1 returned 100% blocks executed 100%
        1:  415:TEST(Sort, aboveLimitQuick) {
call    0 returned 100%
------------------
        -:  420:
        2:  421:TEST(Sort, WrongTypeQuick) {
        1:  422:    int vet_ok[3] = {1,5,0};
        1:  423:    int status = sort(vet_ok, 3, complexityFail, QUICK);
        1:  424:    TEST_ASSERT_EQUAL(1, status);
        1:  425:}
------------------
TEST_Sort_WrongTypeQuick_:
function TEST_Sort_WrongTypeQuick_ called 1 returned 100% blocks executed 100%
        1:  421:TEST(Sort, WrongTypeQuick) {
        1:  422:    int vet_ok[3] = {1,5,0};
        1:  423:    int status = sort(vet_ok, 3, complexityFail, QUICK);
call    0 returned 100%
        1:  424:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:  425:}
------------------
TEST_Sort_WrongTypeQuick_run:
function TEST_Sort_WrongTypeQuick_run called 1 returned 100% blocks executed 100%
        1:  421:TEST(Sort, WrongTypeQuick) {
call    0 returned 100%
------------------
        -:  426:
        -:  427:
        2:  428:TEST(Sort, WrongLenghtQuick) {
        1:  429:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  430:    int vet_less[20] = {0, 3, 7, 14, 20, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  431:    int status = sort(vet_maxLimit, 5, complexity3, QUICK);
        1:  432:    TEST_ASSERT_EQUAL(0, status);
        1:  433:    TEST_ASSERT_EQUAL_INT_ARRAY(vet_maxLimit, vet_less, 20);
        1:  434:}
------------------
TEST_Sort_WrongLenghtQuick_:
function TEST_Sort_WrongLenghtQuick_ called 1 returned 100% blocks executed 100%
        1:  428:TEST(Sort, WrongLenghtQuick) {
        1:  429:    int vet_maxLimit[20] = {14, 3, 20, 7, 0, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  430:    int vet_less[20] = {0, 3, 7, 14, 20, 12, 17, 6, 4, 10, 19, 2, 11, 8, 5, 16, 17, 9, 18, 15};
        1:  431:    int status = sort(vet_maxLimit, 5, complexity3, QUICK);
call    0 returned 100%
        1:  432:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  433:    TEST_ASSERT_EQUAL_INT_ARRAY(vet_maxLimit, vet_less, 20);
call    0 returned 100%
        1:  434:}
------------------
TEST_Sort_WrongLenghtQuick_run:
function TEST_Sort_WrongLenghtQuick_run called 1 returned 100% blocks executed 100%
        1:  428:TEST(Sort, WrongLenghtQuick) {
call    0 returned 100%
------------------
        -:  435:
        2:  436:TEST(Sort, WrongAlgorithm) {
        1:  437:    int vet_maxLimit[5] = {14, 3, 20, 7, 0};
        1:  438:    int status = sort(vet_maxLimit, 5, complexity2, -1);
        1:  439:    TEST_ASSERT_EQUAL(1, status);
        1:  440:}
------------------
TEST_Sort_WrongAlgorithm_:
function TEST_Sort_WrongAlgorithm_ called 1 returned 100% blocks executed 100%
        1:  436:TEST(Sort, WrongAlgorithm) {
        1:  437:    int vet_maxLimit[5] = {14, 3, 20, 7, 0};
        1:  438:    int status = sort(vet_maxLimit, 5, complexity2, -1);
call    0 returned 100%
        1:  439:    TEST_ASSERT_EQUAL(1, status);
call    0 returned 100%
        1:  440:}
------------------
TEST_Sort_WrongAlgorithm_run:
function TEST_Sort_WrongAlgorithm_run called 1 returned 100% blocks executed 100%
        1:  436:TEST(Sort, WrongAlgorithm) {
call    0 returned 100%
------------------
        -:  441:
        2:  442:TEST(Sort, Sorted) {
        1:  443:    int vet_sorted[20] = {0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,17,18,19};
        1:  444:    int expected_sorted[20] = {0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,17,18,19};
        -:  445:    
        1:  446:    int status = sort(vet_sorted, 20, complexity1, COUNTING);
        1:  447:    TEST_ASSERT_EQUAL(0, status);
        1:  448:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_sorted, vet_sorted, 20);
        1:  449:     status = sort(vet_sorted, 20, complexity1, RADIX);
        1:  450:      TEST_ASSERT_EQUAL(0, status);
        1:  451:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_sorted, vet_sorted, 20);
        1:  452:     status = sort(vet_sorted, 20, complexity2, BUBBLE);
        1:  453:      TEST_ASSERT_EQUAL(0, status);
        1:  454:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_sorted, vet_sorted, 20);
        1:  455:     status = sort(vet_sorted, 20, complexity2, INSERTION);
        1:  456:      TEST_ASSERT_EQUAL(0, status);
        1:  457:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_sorted, vet_sorted, 20);
        1:  458:    status = sort(vet_sorted, 20, complexity2, SELECTION);
        1:  459:     TEST_ASSERT_EQUAL(0, status);
        1:  460:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_sorted, vet_sorted, 20);
        1:  461:     status = sort(vet_sorted, 20, complexity3, HEAP);
        1:  462:      TEST_ASSERT_EQUAL(0, status);
        1:  463:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_sorted, vet_sorted, 20);
        1:  464:     status = sort(vet_sorted, 20, complexity3, MERGE);
        1:  465:      TEST_ASSERT_EQUAL(0, status);
        1:  466:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_sorted, vet_sorted, 20);
        1:  467:     status = sort(vet_sorted, 20, complexity3, QUICK);
        1:  468:      TEST_ASSERT_EQUAL(0, status);
        1:  469:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_sorted, vet_sorted, 20);
        -:  470:
        1:  471:    TEST_ASSERT_EQUAL(0, status);
        1:  472:}
------------------
TEST_Sort_Sorted_:
function TEST_Sort_Sorted_ called 1 returned 100% blocks executed 100%
        1:  442:TEST(Sort, Sorted) {
        1:  443:    int vet_sorted[20] = {0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,17,18,19};
        1:  444:    int expected_sorted[20] = {0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,17,18,19};
        -:  445:    
        1:  446:    int status = sort(vet_sorted, 20, complexity1, COUNTING);
call    0 returned 100%
        1:  447:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  448:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_sorted, vet_sorted, 20);
call    0 returned 100%
        1:  449:     status = sort(vet_sorted, 20, complexity1, RADIX);
call    0 returned 100%
        1:  450:      TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  451:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_sorted, vet_sorted, 20);
call    0 returned 100%
        1:  452:     status = sort(vet_sorted, 20, complexity2, BUBBLE);
call    0 returned 100%
        1:  453:      TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  454:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_sorted, vet_sorted, 20);
call    0 returned 100%
        1:  455:     status = sort(vet_sorted, 20, complexity2, INSERTION);
call    0 returned 100%
        1:  456:      TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  457:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_sorted, vet_sorted, 20);
call    0 returned 100%
        1:  458:    status = sort(vet_sorted, 20, complexity2, SELECTION);
call    0 returned 100%
        1:  459:     TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  460:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_sorted, vet_sorted, 20);
call    0 returned 100%
        1:  461:     status = sort(vet_sorted, 20, complexity3, HEAP);
call    0 returned 100%
        1:  462:      TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  463:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_sorted, vet_sorted, 20);
call    0 returned 100%
        1:  464:     status = sort(vet_sorted, 20, complexity3, MERGE);
call    0 returned 100%
        1:  465:      TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  466:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_sorted, vet_sorted, 20);
call    0 returned 100%
        1:  467:     status = sort(vet_sorted, 20, complexity3, QUICK);
call    0 returned 100%
        1:  468:      TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  469:    TEST_ASSERT_EQUAL_INT_ARRAY(expected_sorted, vet_sorted, 20);
call    0 returned 100%
        -:  470:
        1:  471:    TEST_ASSERT_EQUAL(0, status);
call    0 returned 100%
        1:  472:}
------------------
TEST_Sort_Sorted_run:
function TEST_Sort_Sorted_run called 1 returned 100% blocks executed 100%
        1:  442:TEST(Sort, Sorted) {
call    0 returned 100%
------------------
