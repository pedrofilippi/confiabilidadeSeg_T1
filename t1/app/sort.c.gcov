        -:    0:Source:src/sort.c
        -:    1:#include "sort.h"
        -:    2:
function sort called 65 returned 100% blocks executed 100%
       65:    3:int sort(int* a, int length, char* type, int algorithm) {
       65:    4:    int status = 0;
       65:    5:    int *s = (int*)malloc(sizeof(int)*length);
       65:    6:    memcpy(s,a,sizeof(int)*(length));
       65:    7:    if (length < 2 || length > 20) {
branch  0 taken 88% (fallthrough)
branch  1 taken 12%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
       16:    8:        status = 1;
        -:    9:    }
        -:   10:    else {
       49:   11:        switch(algorithm){
branch  0 taken 12%
branch  1 taken 12%
branch  2 taken 12%
branch  3 taken 12%
branch  4 taken 12%
branch  5 taken 12%
branch  6 taken 12%
branch  7 taken 12%
branch  8 taken 2%
        6:   12:            case COUNTING:
        6:   13:                if (!strcmp(type,"On"))
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
        5:   14:                    counting_sort(s, length);
call    0 returned 100%
        -:   15:                else
        1:   16:                    status = 1;
        6:   17:                break;
        6:   18:            case RADIX:
        6:   19:                if (!strcmp(type,"On"))
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
        5:   20:                    radix_sort(s, length);
call    0 returned 100%
        -:   21:                else
        1:   22:                    status = 1;
        6:   23:                break;
        6:   24:            case BUBBLE:
        6:   25:                if (!strcmp(type,"On2"))
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
        5:   26:                    bubble_sort(s, length);
call    0 returned 100%
        -:   27:                else
        1:   28:                    status = 1;
        6:   29:                break;
        6:   30:            case INSERTION:
        6:   31:                if (!strcmp(type,"On2"))
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
        5:   32:                    insertion_sort(s, length);
call    0 returned 100%
        -:   33:                else
        1:   34:                    status = 1;
        6:   35:                break;
        6:   36:            case SELECTION:
        6:   37:                if (!strcmp(type,"On2"))
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
        5:   38:                    selection_sort(s, length);
call    0 returned 100%
        -:   39:                else
        1:   40:                    status = 1;
        6:   41:                break;
        6:   42:            case HEAP:
        6:   43:                if (!strcmp(type,"Onlogn"))
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
        5:   44:                    heap_sort(s, length);
call    0 returned 100%
        -:   45:                else
        1:   46:                    status = 1;
        6:   47:                break;
        6:   48:            case MERGE:
        6:   49:                if (!strcmp(type,"Onlogn"))
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
        5:   50:                    merge_sort(s, 0, length - 1);
call    0 returned 100%
        -:   51:                else
        1:   52:                    status = 1;
        6:   53:                break;
        6:   54:            case QUICK:
        6:   55:                if (!strcmp(type,"Onlogn"))
branch  0 taken 83% (fallthrough)
branch  1 taken 17%
        5:   56:                    quick_sort(s, 0, length - 1);
call    0 returned 100%
        -:   57:                else
        1:   58:                    status = 1;
        6:   59:                break;
        1:   60:            default:
        1:   61:                status = 1;
        1:   62:                break;
        -:   63:            }
        -:   64:    }
       65:   65:    memcpy(a,s,sizeof(int)*(length));
       65:   66:    free(s);
       65:   67:    return status;
        -:   68:}
